package test;

import java.io.*;

/**
 * Created by zhangfeng on 2014/10/31.
 */
public class TestHttp {

    public static void main(String args[]){

        String json = "{\"channelId\": \"172.1.1.1_3\",\"startTime\": \"2014-11-19 08:30:00\",\"endTime\": \"2014-11-19 18:20:00\",\"featureBin\": \"0.7224575,0.38950163,0.34725404,0.7103304,0.81567246,0.39160794,0.86704063,0.59376657,0.76755446,0.05600953,0.25860304,0.7489788,0.3441735,0.53455406,0.71210784,0.2518351,0.3403601,0.3706026,0.5453806,0.73148125,0.8858885,0.41049165,0.8978817,0.54753584,0.15486294,0.76881576,0.9315599,0.9936365,0.62333655,0.36253136,0.53914446,0.5013453,0.8676829,0.24732858,0.12719512,0.4840458,0.31435055,0.87424576,0.30410004,0.7203847,0.8921168,0.07670361,0.6967516,0.8991968,0.3307001,0.7552435,0.7815467,0.641491,0.8526,0.7721213,0.63646424,0.3793773,0.25444317,0.93900347,0.1952163,0.44682693,0.23417944,0.38244486,0.658922,0.5535355,0.23357475,0.22332197,0.6456055,0.04219842,0.80210376,0.89329916,0.83639896,0.43311787,0.3971746,0.53470117,0.91607535,0.34078503,0.7933897,0.55645126,0.56402236,0.8980777,0.6351382,0.33023596,0.8926862,0.9787792,0.7152358,0.25562978,0.76968724,0.2926653,0.9587072,0.56403106,0.81618357,0.50446844,0.82441026,0.5980223,0.9196992,0.95426977,0.47540027,0.23990774,0.909744,0.028583944,0.0072475076,0.2810428,0.64744544,0.33550185,0.73557615,0.94813484,0.40753573,0.30127835,0.83164674,0.4255609,0.7669666,0.7478663,0.8377454,0.941148,0.64684457,0.18988425,4.7278404,0.9896375,0.024119377,0.6547906,0.21587753,0.2416938,0.68046105,0.5716438,0.30001843,0.08091247,0.18509388,0.8724378,0.47433645,0.99656564,0.8162189,0.7268899,0.40769297,0.97114193,0.9653661,0.9986467,0.98470664,0.7900725,0.5970213,0.4206968,0.59986305,0.88298357,0.8617397,0.8835067,0.2136581,0.91360897,0.9973866,0.9948084,0.4837758,0.16698062,0.16594833,0.9794887,0.91212815,0.65117186,0.031490505,0.9566918,0.36675543,0.31579685,0.3103639,0.9647161,0.3634839,0.48539472,0.54287606,0.74885094,0.7713697,0.37310565,0.22467178,0.11987692,0.86195934,0.7546481,0.6774496,0.60907614,0.9070223,0.68613833,0.56694895,0.55743885,0.47254604,0.69898075,0.429075,0.6910936,0.6164341,0.62374884,0.5333978,0.5512452,0.90964735,0.021152973,0.69102484,0.9051177,0.429734,0.8359527,0.44806093,0.89523333,0.06419051,0.058738947,0.44674087,0.2590983,0.8793881,0.86625,0.48716134,0.43193108,0.30752224,0.41425353,0.08980346,0.8339954,0.15595454,0.4446441,0.7022829,0.6345506,0.20529813,0.42248422,0.37570363,0.9101998,0.5176573,0.5871186,0.9724269,0.40091264,0.68570644,0.14768493,0.17695647,0.1772604,0.60603154,0.7064375,0.6370504,0.023101091,0.023752928,0.6980166,0.038291693,0.40536648,0.9654013,0.2994843,0.34051192,0.6336563,0.22696245,0.52059484,0.5101,0.43457192,0.61570597,0.4179576,0.052921534,0.2972862,0.53773946,0.9977315,0.3760118,0.846539,0.48620248,0.05209285,0.323211,0.31648302,0.8037596,0.10343462,0.18442714,0.22361618,0.88182545,0.7611807,0.56731224,0.25010043,0.41014934,0.09895587,0.944015,0.47135544,0.9244976,0.37000382,0.5976501,0.605859,0.3158415,0.24715382,0.44964075,0.28311306,0.088439226,0.3169173,0.65972805,0.16091174,0.49137962,0.30766487,0.46787965,0.4591664,0.53153294,0.2871464,0.95740366,0.3890165,0.7165749,0.13835359,0.93021864,0.45781797,0.91405916,0.09398013,0.020523608,0.52852494,0.26380306,0.07323688,0.3572417,0.25224954,0.7916249,0.38088864,0.29690468,0.4123121,0.466362,0.8730569,0.9685431,0.29442406,0.47086543,0.6091942,0.035221696,0.2989357,0.5511922,0.9519017,0.32080537,0.1461268,0.42450738,0.9687782,0.8661798,0.5937272,0.4013967,0.27174932,0.8604248,0.12727183,0.9766398,0.30340636,0.486422,0.5291801,0.1063782,0.7665394,0.477264,0.15289259,0.9895458,0.87760866,0.5029403,0.5859184,0.25604606,0.40834957,0.0025533438,0.7827721,0.7102073,0.8286483,0.805332,0.67868686,0.9404257,0.060485303,0.6066627,0.39145827,0.7676014,0.44496953,0.7990602,0.90622383,0.32713926,0.07576311,0.22140521,0.28144878,0.5511669,0.99161214,0.45495027,0.9695386,0.5066055,0.19299752,0.43673462,0.5086192,0.84632427,0.66343516,0.40847278,0.20003009,0.018443823,0.66067743,0.8031404,0.16650683,0.65469354,0.38859165,0.27693415,0.5070475,0.102445304,0.6740432,0.10874075,0.8848513,0.5846593,0.62754864,0.95351714,0.45390832,0.25361156,0.15025395,0.9940194,0.33783346,0.0621922,0.017048419,0.8841826,0.10205233,0.10314059,0.5860602,0.21734655,0.62874216,0.88234335,0.69375825,0.2367652,0.22492439,0.99587464,0.24337322,0.990871,0.5203367,0.29858458,0.3989572,0.43116558,0.9863434,0.8896065,0.19035,0.06906426,0.61396444,0.9301776,0.013461053,0.7153614,0.20252907,0.36277354,0.7890892,0.6911431,0.74552906,0.2570113,0.0010869503,0.34403157,0.8626203,0.58445233,0.06575805,0.053794205,0.06269634,0.36685425,0.349311,0.44490564,0.669436,0.074198306,0.024950206,0.7220666,0.47526205,0.92172915,0.98737484,0.8425238,0.98039037,0.9591593,0.377298,0.27399534,0.42939645,0.01811999,0.33494717,0.94991064,0.6778915,0.22202325,0.33784062,0.51846516,0.24651784,0.72998583,0.5885485,0.3357371,0.17921287,0.12574345,0.12237626,0.826016,0.58883876,0.64405704,0.5882992,0.727866,0.007745087,0.5996182,0.520002,0.46874058,0.9661642,0.62365276,0.62415266,0.023745954,0.0906961,0.87618434,0.4522729,0.37811697,0.5823142,0.37026304,0.338625,0.3439386,0.22272432,0.07951552,0.74288756,0.39856595,0.23457891,0.091397464,0.9621378,0.28713584,0.9406524,0.78290164,0.41653442,0.9397177,0.42590493\"}";
        String url = "http://192.168.9.2:8080/monitor/rest/video/query";
        try {
            postRequest(json,url);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    /**
     * 发送请求到http服务然后接收返回报文
     * @param jsonStr 请求的json格式的字符串
     * @param path   请求的http服务的路径
     * @return 返回请求的响应信息
     * @throws java.io.IOException
     */
    public static String postRequest(String jsonStr, String path)
            throws IOException {
        // 得到请求报文的二进制数据
        byte[] data = jsonStr.getBytes();
        java.net.URL url = new java.net.URL(path);
        //openConnection() 返回一个 URLConnection 对象，它表示到 URL 所引用的远程对象的连接
        java.net.HttpURLConnection conn = (java.net.HttpURLConnection) url.openConnection();// 打开一个连接
        conn.setRequestMethod("POST");// 设置post方式请求
        conn.setConnectTimeout(5 * 1000);// 设置连接超时时间为5秒  JDK1.5以上才有此方法
        conn.setReadTimeout(20 * 1000);// 设置读取超时时间为20秒 JDK1.5以上才有此方法
        // 打算使用 URL 连接进行输出，则将 DoOutput 标志设置为 true
        conn.setDoOutput(true);
        // 这里只设置内容类型与内容长度的头字段根据传送内容决定
        // 内容类型Content-Type:
        // application/x-www-form-urlencoded、text/xml;charset=GBK
        // 内容长度Content-Length: 38
        conn.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
        conn.setRequestProperty("Content-Length", String.valueOf(data.length));
        OutputStream outStream = conn.getOutputStream();// 返回写入到此连接的输出流
        // 把二进制数据写入是输出流
        outStream.write(data);
        // 内存中的数据刷入
        outStream.flush();
        //关闭流
        outStream.close();

        String msg = "";// 保存调用http服务后的响应信息
        // 如果请求响应码是200，则表示成功
        if (conn.getResponseCode() == 200) {
            // HTTP服务端返回的编码是UTF-8,故必须设置为UTF-8,保持编码统一,否则会出现中文乱码
            BufferedReader in = new BufferedReader(new InputStreamReader(
                    (InputStream) conn.getInputStream(), "UTF-8"));//返回从此打开的连接读取的输入流
            msg = in.readLine();
            System.out.println("===========: " + msg);
            in.close();
        }
        conn.disconnect();// 断开连接
        return msg;
    }

}
